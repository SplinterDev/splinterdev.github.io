{"version":3,"sources":["components/Sidenav/Sidenav.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Sidenav","className","exact","activeClassName","to","Logbook","lazy","Developer","Drummer","Writer","Home","renderLoader","App","href","path","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAsCeA,MAlCf,WACE,OACE,qBAAKC,UAAU,UAAf,SACE,+BACE,6BACE,cAAC,IAAD,CAASC,OAAK,EAACC,gBAAgB,cAAcC,GAAG,IAAhD,oBAIF,6BACE,cAAC,IAAD,CAASD,gBAAgB,cAAcC,GAAG,WAA1C,uBAIF,6BACE,cAAC,IAAD,CAASD,gBAAgB,cAAcC,GAAG,aAA1C,yBAIF,6BACE,cAAC,IAAD,CAASD,gBAAgB,cAAcC,GAAG,UAA1C,sBAIF,6BACE,cAAC,IAAD,CAASD,gBAAgB,cAAcC,GAAG,WAA1C,6BCvBJC,EAAUC,gBAAK,kBAAM,sDACrBC,EAAYD,gBAAK,kBAAM,gCACvBE,EAAUF,gBAAK,kBAAM,gCACrBG,EAASH,gBAAK,kBAAM,gCACpBI,EAAOJ,gBAAK,kBAAM,gCAElBK,EAAe,kBAAM,yCAEZ,SAASC,IACtB,OACE,qBAAKX,UAAU,MAAf,SACE,eAAC,IAAD,WACE,iCACE,mBAAGY,KAAK,IAAR,SACE,mEAGJ,sBAAKZ,UAAU,UAAf,UACE,gCACE,cAAC,EAAD,MAEF,+BACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOa,KAAK,IAAIZ,OAAK,EAArB,SACE,cAAC,WAAD,CAAUa,SAAUJ,IAApB,SACE,cAACD,EAAD,QAGJ,cAAC,IAAD,CAAOI,KAAK,WAAZ,SACE,cAAC,WAAD,CAAUC,SAAUJ,IAApB,SACE,cAACN,EAAD,QAGJ,cAAC,IAAD,CAAOS,KAAK,aAAZ,SACE,cAAC,WAAD,CAAUC,SAAUJ,IAApB,SACE,cAACJ,EAAD,QAGJ,cAAC,IAAD,CAAOO,KAAK,UAAZ,SACE,cAAC,WAAD,CAAUC,SAAUJ,IAApB,SACE,cAACF,EAAD,QAGJ,cAAC,IAAD,CAAOK,KAAK,WAAZ,SACE,cAAC,WAAD,CAAUC,SAAUJ,IAApB,SACE,cAACH,EAAD,gBAMV,4FC7CYQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SD4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.fa579eaa.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport './Sidenav.scss'\n\nfunction Sidenav(): React.ReactElement {\n  return (\n    <nav className=\"Sidenav\">\n      <ul>\n        <li>\n          <NavLink exact activeClassName=\"active-link\" to=\"/\">\n            home\n          </NavLink>\n        </li>\n        <li>\n          <NavLink activeClassName=\"active-link\" to=\"/logbook\">\n            logbook\n          </NavLink>\n        </li>\n        <li>\n          <NavLink activeClassName=\"active-link\" to=\"/developer\">\n            developer\n          </NavLink>\n        </li>\n        <li>\n          <NavLink activeClassName=\"active-link\" to=\"/writer\">\n            writer\n          </NavLink>\n        </li>\n        <li>\n          <NavLink activeClassName=\"active-link\" to=\"/drummer\">\n            drummer\n          </NavLink>\n        </li>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Sidenav\n","import React, { lazy, Suspense } from 'react'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nimport './App.scss'\n\nimport Sidenav from './components/Sidenav/Sidenav'\n\nconst Logbook = lazy(() => import('./components/Logbook/Logbook'))\nconst Developer = lazy(() => import('./components/Developer/Developer'))\nconst Drummer = lazy(() => import('./components/Drummer/Drummer'))\nconst Writer = lazy(() => import('./components/Writer/Writer'))\nconst Home = lazy(() => import('./components/Home/Home'))\n\nconst renderLoader = () => <p>Loading</p>\n\nexport default function App(): React.ReactElement {\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <header>\n          <a href=\"/\">\n            <h1>Fabricio Julian C. Montenegro</h1>\n          </a>\n        </header>\n        <div className=\"content\">\n          <aside>\n            <Sidenav />\n          </aside>\n          <main>\n            <Switch>\n              <Route path=\"/\" exact>\n                <Suspense fallback={renderLoader()}>\n                  <Home />\n                </Suspense>\n              </Route>\n              <Route path=\"/logbook\">\n                <Suspense fallback={renderLoader()}>\n                  <Logbook />\n                </Suspense>\n              </Route>\n              <Route path=\"/developer\">\n                <Suspense fallback={renderLoader()}>\n                  <Developer />\n                </Suspense>\n              </Route>\n              <Route path=\"/writer\">\n                <Suspense fallback={renderLoader()}>\n                  <Writer />\n                </Suspense>\n              </Route>\n              <Route path=\"/drummer\">\n                <Suspense fallback={renderLoader()}>\n                  <Drummer />\n                </Suspense>\n              </Route>\n            </Switch>\n          </main>\n        </div>\n        <footer>Copyright &copy; 2021 Fabricio Julian C. Montenegro</footer>\n      </HashRouter>\n    </div>\n  )\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\n// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport default function register(): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString(),\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.')\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.')\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}